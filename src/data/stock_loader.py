"""
Stock list loader module for handling .txt and .csv files
"""

import pandas as pd
import os
from typing import List, Union, Optional
from pathlib import Path

class StockLoader:
    """Handles loading stock symbols from various file formats"""
    
    def __init__(self):
        self.supported_formats = ['.txt', '.csv']
    
    def load_stocks(self, file_path: Union[str, Path]) -> List[str]:
        """
        Load stock symbols from a file
        
        Args:
            file_path: Path to the stock list file
            
        Returns:
            List of stock symbols
            
        Raises:
            FileNotFoundError: If file doesn't exist
            ValueError: If file format is not supported
        """
        file_path = Path(file_path)
        
        if not file_path.exists():
            raise FileNotFoundError(f"Stock list file not found: {file_path}")
        
        if file_path.suffix not in self.supported_formats:
            raise ValueError(f"Unsupported file format: {file_path.suffix}. Supported formats: {self.supported_formats}")
        
        if file_path.suffix == '.txt':
            return self._load_from_txt(file_path)
        elif file_path.suffix == '.csv':
            return self._load_from_csv(file_path)
    
    def _load_from_txt(self, file_path: Path) -> List[str]:
        """Load symbols from .txt file"""
        symbols = []
        
        with open(file_path, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                
                # Skip empty lines and comments
                if not line or line.startswith('#'):
                    continue
                
                # Handle different formats
                if ',' in line:
                    # Comma-separated values
                    symbols.extend([s.strip() for s in line.split(',') if s.strip()])
                else:
                    # Single symbol per line
                    symbols.append(line)
        
        return [symbol for symbol in symbols if symbol]  # Remove empty strings
    
    def _load_from_csv(self, file_path: Path) -> List[str]:
        """Load symbols from .csv file"""
        try:
            # Try to read as CSV
            df = pd.read_csv(file_path)
            
            # Look for common column names
            symbol_columns = ['symbol', 'Symbol', 'SYMBOL', 'ticker', 'Ticker', 'TICKER']
            symbol_col = None
            
            for col in symbol_columns:
                if col in df.columns:
                    symbol_col = col
                    break
            
            if symbol_col is None:
                # Use first column if no standard column found
                symbol_col = df.columns[0]
            
            symbols = df[symbol_col].dropna().astype(str).tolist()
            return [symbol.strip() for symbol in symbols if symbol.strip()]
            
        except Exception as e:
            raise ValueError(f"Error reading CSV file: {e}")
    
    def save_stocks(self, symbols: List[str], file_path: Union[str, Path], format: str = 'txt') -> None:
        """
        Save stock symbols to a file
        
        Args:
            symbols: List of stock symbols
            file_path: Path to save the file
            format: File format ('txt' or 'csv')
        """
        file_path = Path(file_path)
        
        if format == 'txt':
            self._save_to_txt(symbols, file_path)
        elif format == 'csv':
            self._save_to_csv(symbols, file_path)
        else:
            raise ValueError(f"Unsupported format: {format}")
    
    def _save_to_txt(self, symbols: List[str], file_path: Path) -> None:
        """Save symbols to .txt file"""
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write("# Stock Symbols List\n")
            f.write("# Generated by Fib-Equity Screener\n\n")
            for symbol in symbols:
                f.write(f"{symbol}\n")
    
    def _save_to_csv(self, symbols: List[str], file_path: Path) -> None:
        """Save symbols to .csv file"""
        df = pd.DataFrame({'Symbol': symbols})
        df.to_csv(file_path, index=False)
    
    def validate_symbols(self, symbols: List[str]) -> List[str]:
        """
        Validate and clean stock symbols
        
        Args:
            symbols: List of stock symbols
            
        Returns:
            List of validated symbols
        """
        validated = []
        
        for symbol in symbols:
            # Clean the symbol
            clean_symbol = symbol.strip().upper()
            
            # Basic validation
            if not clean_symbol:
                continue
            
            # Remove common prefixes/suffixes that might cause issues
            clean_symbol = clean_symbol.replace('NSE:', '').replace('BSE:', '')
            
            # Add .NS suffix if not present (for Yahoo Finance)
            if not clean_symbol.endswith('.NS') and not clean_symbol.endswith('.BO'):
                clean_symbol += '.NS'
            
            validated.append(clean_symbol)
        
        return list(set(validated))  # Remove duplicates
    
    def get_default_stocks(self) -> List[str]:
        """Get default Nifty 50 stock list"""
        default_file = Path("samples/nifty50.txt")
        
        if default_file.exists():
            return self.load_stocks(default_file)
        else:
            # Return a minimal default list
            return [
                "RELIANCE.NS", "TCS.NS", "HDFCBANK.NS", "INFY.NS", "HINDUNILVR.NS",
                "ITC.NS", "SBIN.NS", "BHARTIARTL.NS", "KOTAKBANK.NS", "LT.NS"
            ]

# Convenience function
def load_stock_list(file_path: Union[str, Path]) -> List[str]:
    """
    Convenience function to load stock list
    
    Args:
        file_path: Path to stock list file
        
    Returns:
        List of stock symbols
    """
    loader = StockLoader()
    return loader.load_stocks(file_path)
